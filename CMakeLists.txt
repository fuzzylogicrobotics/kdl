cmake_minimum_required(VERSION 3.16)

project(kdl VERSION 2.0.0)

option(BUILD_SHARED_LIBS "Build shared libraries" ON)

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR USE_CUSTOM_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/install CACHE PATH "Default install path" FORCE)
    set(USE_CUSTOM_INSTALL_PREFIX TRUE CACHE BOOL "")
    message(STATUS "Setting default install directory to ${CMAKE_INSTALL_PREFIX}")
endif()

find_package(Eigen3 CONFIG REQUIRED)

set(kdl_srcs
    kdl/articulatedbodyinertia.cpp
    kdl/chain.cpp
    kdl/chaindynparam.cpp
    kdl/chainfdsolver_recursive_newton_euler.cpp
    kdl/chainfksolverpos_recursive.cpp
    kdl/chainfksolvervel_recursive.cpp
    kdl/chainidsolver_recursive_newton_euler.cpp
    kdl/chainidsolver_vereshchagin.cpp
    kdl/chainiksolverpos_lma.cpp
    kdl/chainiksolverpos_nr.cpp
    kdl/chainiksolverpos_nr_jl.cpp
    kdl/chainiksolvervel_pinv.cpp
    kdl/chainiksolvervel_pinv_givens.cpp
    kdl/chainiksolvervel_pinv_nso.cpp
    kdl/chainiksolvervel_wdls.cpp
    kdl/chainjnttojacdotsolver.cpp
    kdl/chainjnttojacsolver.cpp
    kdl/frameacc.cpp
    kdl/frames.cpp
    kdl/frames_io.cpp
    kdl/framevel.cpp
    kdl/jacobian.cpp
    kdl/jntarray.cpp
    kdl/jntarrayacc.cpp
    kdl/jntarrayvel.cpp
    kdl/jntspaceinertiamatrix.cpp
    kdl/joint.cpp
    kdl/kinfam_io.cpp
    kdl/rigidbodyinertia.cpp
    kdl/rotationalinertia.cpp
    kdl/segment.cpp
    kdl/tree.cpp
    kdl/utilities/error_stack.cxx
    kdl/utilities/svd_HH.cpp
    kdl/utilities/ldl_solver_eigen.cpp
    kdl/utilities/svd_eigen_HH.cpp
    kdl/utilities/svd_eigen_Macie.cpp
    kdl/utilities/utility.cxx
    kdl/utilities/utility_io.cxx
)

add_library(kdl ${kdl_srcs})
set_property(TARGET kdl PROPERTY CXX_STANDARD 20)

if(MSVC)
  # /W4 warning level
  # /WX warning as error
  target_compile_options(kdl PRIVATE /W4 /WX)
else()
  # -Werror warning as error
  # -Wall -Wextra Warning level
  target_compile_options(kdl PRIVATE -Wall -Wextra -Werror)
endif()

# Enable Eigen::internal::set_is_malloc_allowed checks for dynamic allocations (does not do anything in Release)
target_compile_definitions(kdl PUBLIC EIGEN_RUNTIME_NO_MALLOC)

if(MSVC)
    set_target_properties(kdl PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()
target_include_directories(kdl PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
target_link_libraries(kdl PUBLIC Eigen3::Eigen)

#################################
# Install                       #
#################################

install(DIRECTORY kdl DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING 
        PATTERN "*.hpp"
        PATTERN "*.h")
install(TARGETS ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}-targets
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Install pdb files
if(WIN32 AND BUILD_SHARED_LIBS)
  install(FILES $<TARGET_PDB_FILE:${PROJECT_NAME}> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
endif()

# Install CMake config files
set(${PROJECT_NAME}_INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

install(EXPORT ${PROJECT_NAME}-targets
  DESTINATION ${${PROJECT_NAME}_INSTALL_CONFIGDIR}
  NAMESPACE ${PROJECT_NAME}::
)

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake.in "# Generated by CMake @CMAKE_VERSION@ for @PROJECT_NAME@
@PACKAGE_INIT@
include(\"\$\{CMAKE_CURRENT_LIST_DIR\}/@PROJECT_NAME@-targets.cmake\")
")
configure_package_config_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake.in ${PROJECT_NAME}-config.cmake
  INSTALL_DESTINATION ${${PROJECT_NAME}_INSTALL_CONFIGDIR}
)

write_basic_package_version_file(${PROJECT_NAME}-config-version.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY AnyNewerVersion
)

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
  DESTINATION ${${PROJECT_NAME}_INSTALL_CONFIGDIR}
)